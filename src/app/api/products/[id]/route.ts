import { NextResponse } from "next/server";
import connectDB from "@backend/config/db";
import Product from "@backend/models/Product";

export const DELETE = async (req: Request, { params }: { params: { id: string } }) => {
  try {
    await connectDB();

    const { id } = params;
    const deletedProduct = await Product.findByIdAndDelete(id);

    if (!deletedProduct) {
      return NextResponse.json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" }, { status: 404 });
    }

    return NextResponse.json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói x√≥a s·∫£n ph·∫©m:", error);
    return NextResponse.json({ error: "L·ªói server" }, { status: 500 });
  }
};

// üü¢ API c·∫≠p nh·∫≠t s·∫£n ph·∫©m
export const PUT = async (req: Request, { params }: { params: { id: string } }) => {
  try {
    await connectDB();
    const { id } = params;
    const body = await req.json();

    console.log("üîç D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", body); // Debug log

    if (!body.name || !body.image) {
      return NextResponse.json({ error: "Thi·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m!" }, { status: 400 });
    }

    const updatedProduct = await Product.findByIdAndUpdate(
      id,
      { name: body.name, image: body.image },
      { new: true }
    );

    if (!updatedProduct) {
      return NextResponse.json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" }, { status: 404 });
    }

    return NextResponse.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", product: updatedProduct });
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
    return NextResponse.json({ error: "L·ªói server!" }, { status: 500 });
  }
};