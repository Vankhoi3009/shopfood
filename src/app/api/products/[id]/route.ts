import { NextRequest, NextResponse } from "next/server";
import connectDB from "@backend/config/db";
import { ObjectId } from "mongodb";

// H√†m GET
export async function GET(req: NextRequest) {
  try {
    const { id } = req.nextUrl.pathname.split("/").pop()!; // L·∫•y id t·ª´ ƒë∆∞·ªùng d·∫´n

    // üõë Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
    if (!ObjectId.isValid(id)) {
      return NextResponse.json({ error: "Invalid product ID" }, { status: 400 });
    }

    // ‚úÖ K·∫øt n·ªëi database
    const db = await connectDB();
    if (!db) {
      return NextResponse.json({ error: "Database connection failed" }, { status: 500 });
    }

    // ‚úÖ T√¨m s·∫£n ph·∫©m trong MongoDB
    const product = await db.collection("test").findOne({ _id: new ObjectId(id) });

    // üõë Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i
    if (!product) {
      return NextResponse.json({ error: "Product not found" }, { status: 404 });
    }

    return NextResponse.json(product);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
    return NextResponse.json({ error: "Failed to fetch product details" }, { status: 500 });
  }
}

// H√†m PATCH
export const PATCH = async (req: NextRequest) => {
  try {
    const { id } = req.nextUrl.pathname.split("/").pop()!; // L·∫•y id t·ª´ ƒë∆∞·ªùng d·∫´n

    const db = await connectDB();
    if (!db) return NextResponse.json({ error: "Database connection failed" }, { status: 500 });

    if (!ObjectId.isValid(id)) {
      return NextResponse.json({ error: "Invalid product ID" }, { status: 400 });
    }

    const updates = await req.json();
    const result = await db.collection("test").updateOne(
      { _id: new ObjectId(id) },
      { $set: updates }
    );

    if (result.matchedCount === 0) {
      return NextResponse.json({ error: "Product not found" }, { status: 404 });
    }

    return NextResponse.json({ message: "Product updated successfully" });
  } catch (error) {
    console.error("‚ùå PATCH Error:", error);
    return NextResponse.json({ error: "Failed to update product" }, { status: 500 });
  }
};

// H√†m DELETE
export const DELETE = async (req: NextRequest) => {
  try {
    const { id } = req.nextUrl.pathname.split("/").pop()!; // L·∫•y id t·ª´ ƒë∆∞·ªùng d·∫´n

    const db = await connectDB();
    if (!db) return NextResponse.json({ error: "Database connection failed" }, { status: 500 });

    if (!ObjectId.isValid(id)) {
      return NextResponse.json({ error: "Invalid product ID" }, { status: 400 });
    }

    const result = await db.collection("test").deleteOne({ _id: new ObjectId(id) });

    if (result.deletedCount === 0) {
      return NextResponse.json({ error: "Product not found" }, { status: 404 });
    }

    return NextResponse.json({ message: "Product deleted successfully" });
  } catch (error) {
    console.error("‚ùå DELETE Error:", error);
    return NextResponse.json({ error: "Failed to delete product" }, { status: 500 });
  }
};
